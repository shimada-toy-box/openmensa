{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Developer Documentation \u00b6 These pages document the current OpenMensa APIs. This includes the HTTP REST API to consume canteen and meal information as well as the XML schema implemented by parser feeds. Current API Version \u00b6 API v2 is stable but backward-compatible updates may occur. Current Feed Version \u00b6 Feed v2 is stable but backward-compatible updates may occur.","title":"Developer Documentation"},{"location":"#developer-documentation","text":"These pages document the current OpenMensa APIs. This includes the HTTP REST API to consume canteen and meal information as well as the XML schema implemented by parser feeds.","title":"Developer Documentation"},{"location":"#current-api-version","text":"API v2 is stable but backward-compatible updates may occur.","title":"Current API Version"},{"location":"#current-feed-version","text":"Feed v2 is stable but backward-compatible updates may occur.","title":"Current Feed Version"},{"location":"api/v2/errors/","text":"Client Errors \u00b6 400 Bad Request \u00b6 For example, when sending invalid JSON/XML/MessagePack data in request body: HTTP / 2.0 400 Bad Request 404 Not Found \u00b6 Accessing a non-existing resource: HTTP / 2.0 404 Not Found 422 Unprocessable Entity \u00b6 Possible reasons: Sending invalid fields or invalid field content in request body, or Sending invalid parameters or invalid parameter content in URL parameters. HTTP / 2.0 422 Unprocessable Entity","title":"Client Errors"},{"location":"api/v2/errors/#client-errors","text":"","title":"Client Errors"},{"location":"api/v2/errors/#400-bad-request","text":"For example, when sending invalid JSON/XML/MessagePack data in request body: HTTP / 2.0 400 Bad Request","title":"400 Bad Request"},{"location":"api/v2/errors/#404-not-found","text":"Accessing a non-existing resource: HTTP / 2.0 404 Not Found","title":"404 Not Found"},{"location":"api/v2/errors/#422-unprocessable-entity","text":"Possible reasons: Sending invalid fields or invalid field content in request body, or Sending invalid parameters or invalid parameter content in URL parameters. HTTP / 2.0 422 Unprocessable Entity","title":"422 Unprocessable Entity"},{"location":"api/v2/overview/","text":"Overview \u00b6 This describes the resources that make up the first public OpenMensa API v2. Schema \u00b6 All API access happens over HTTPS. Endpoint: https://openmensa.org/api/v2 All paths referenced throughout this document are meant to be relative to the API endpoint above. Formats \u00b6 All data is sent and received as JSON by default. Encoding \u00b6 Encoding for all requests and responses should be UTF-8. Date and Time \u00b6 All timestamps are returned in ISO 8601 format (UTC). YYYY-MM-DDTHH:MM:SSZ Dates will be returned without time information. YYYY-MM-DD Addresses \u00b6 Postal address formats vary by country but at least the following information should be included in given order. street address, postal code + city/town, country Coordinates \u00b6 Geographic coordinates are returned as an array of latitude and longitude. [ 52.3877669669544 , 13.1209909915924 ] Examples \u00b6 All examples are given in JSON notion (request as well as response bodies), for general rules how the XML will look see here . Unless otherwise stated a response will contain all shown fields. Pagination \u00b6 Requests returning multiple items will be paginated to 10 items by default. You can specify the number of items per page using the limit parameter. Allowed values are between 1 and 100. The upper limit may be different for specific resources. Further pages can be requested by specifying the page parameter. First page (the one you usually retrieve without explicitly specifying the page number) is page number 1 . Client Errors \u00b6 See here .","title":"Overview"},{"location":"api/v2/overview/#overview","text":"This describes the resources that make up the first public OpenMensa API v2.","title":"Overview"},{"location":"api/v2/overview/#schema","text":"All API access happens over HTTPS. Endpoint: https://openmensa.org/api/v2 All paths referenced throughout this document are meant to be relative to the API endpoint above.","title":"Schema"},{"location":"api/v2/overview/#formats","text":"All data is sent and received as JSON by default.","title":"Formats"},{"location":"api/v2/overview/#encoding","text":"Encoding for all requests and responses should be UTF-8.","title":"Encoding"},{"location":"api/v2/overview/#date-and-time","text":"All timestamps are returned in ISO 8601 format (UTC). YYYY-MM-DDTHH:MM:SSZ Dates will be returned without time information. YYYY-MM-DD","title":"Date and Time"},{"location":"api/v2/overview/#addresses","text":"Postal address formats vary by country but at least the following information should be included in given order. street address, postal code + city/town, country","title":"Addresses"},{"location":"api/v2/overview/#coordinates","text":"Geographic coordinates are returned as an array of latitude and longitude. [ 52.3877669669544 , 13.1209909915924 ]","title":"Coordinates"},{"location":"api/v2/overview/#examples","text":"All examples are given in JSON notion (request as well as response bodies), for general rules how the XML will look see here . Unless otherwise stated a response will contain all shown fields.","title":"Examples"},{"location":"api/v2/overview/#pagination","text":"Requests returning multiple items will be paginated to 10 items by default. You can specify the number of items per page using the limit parameter. Allowed values are between 1 and 100. The upper limit may be different for specific resources. Further pages can be requested by specifying the page parameter. First page (the one you usually retrieve without explicitly specifying the page number) is page number 1 .","title":"Pagination"},{"location":"api/v2/overview/#client-errors","text":"See here .","title":"Client Errors"},{"location":"api/v2/canteens/","text":"Canteens API \u00b6 The Canteens API allows to query for all canteens or a geographical filtered subset. Canteens are supposed to not change very often and should be cached locally. List canteens \u00b6 List all canteens: GET /api/v2/canteens Parameters \u00b6 near[lat] , near[lng] Optional set of coordinates to search for canteens near the given location. Both coordinates must be specified and be valid floating point numbers. Example: GET /api/v2/canteens?near[lat]=52.393535&near[lng]=13.127814 near[dist] Optional distance in kilometers to search near given coordinates. Requires coordinates to be specified too. Defaults to 10 kilometers. Example: GET /api/v2/canteens?near[lat]=52.393535&near[lng]=13.127814&near[dist]=5 ids Optional list of comma-separated canteen IDs that should be returned. hasCoordinates Optional restriction to only returned canteens with ( true ) or without ( false ) coordinates. Response \u00b6 HTTP / 2.0 200 Ok Link : <https://openmensa.org/api/v2/canteens?page=2>; rel=\"next\", <https://openmensa.org/api/v2/canteens?page=5>; rel=\"last\" Content-Type : application/json; charset=utf-8 [ { \"id\" : 1 , \"name\" : \"Mensa UniCampus Magdeburg\" , \"city\" : \"Magdeburg\" , \"address\" : \"Pf\u00e4lzer Str. 1, 39106 Magdeburg\" , \"coordinates\" : null }, { \"id\" : 104 , \"name\" : \"Bistro Tasty Studio Babelsberg\" , \"city\" : \"Potsdam\" , \"address\" : \"August-Bebel-Str. 26-53, 14482 Potsdam, Deutschland\" , \"coordinates\" : [ 52.3877669669544 , 13.1209909915924 ] } ] Get a canteen \u00b6 GET /api/v2/canteens/{id} HTTP / 2.0 Response \u00b6 GET /api/v2/canteens/1 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"id\" : 1 , \"name\" : \"Mensa UniCampus Magdeburg\" , \"city\" : \"Magdeburg\" , \"address\" : \"Pf\u00e4lzer Str. 1, 39106 Magdeburg\" , \"coordinates\" : [ 52.139618827301895 , 11.647599935531616 ] } id int Unique numerical identifier in the API and database name The canteens name address Human readable real-world locator (vulgo street address ) coordinates Optional list of latitude and longitude in north-eastern direction. Negative values imply southern or western hemisphere. Can be null if no coordinates were given or they are unknown.","title":"Canteens API"},{"location":"api/v2/canteens/#canteens-api","text":"The Canteens API allows to query for all canteens or a geographical filtered subset. Canteens are supposed to not change very often and should be cached locally.","title":"Canteens API"},{"location":"api/v2/canteens/#list","text":"List all canteens: GET /api/v2/canteens","title":"List canteens"},{"location":"api/v2/canteens/#list-params","text":"near[lat] , near[lng] Optional set of coordinates to search for canteens near the given location. Both coordinates must be specified and be valid floating point numbers. Example: GET /api/v2/canteens?near[lat]=52.393535&near[lng]=13.127814 near[dist] Optional distance in kilometers to search near given coordinates. Requires coordinates to be specified too. Defaults to 10 kilometers. Example: GET /api/v2/canteens?near[lat]=52.393535&near[lng]=13.127814&near[dist]=5 ids Optional list of comma-separated canteen IDs that should be returned. hasCoordinates Optional restriction to only returned canteens with ( true ) or without ( false ) coordinates.","title":"Parameters"},{"location":"api/v2/canteens/#list-response","text":"HTTP / 2.0 200 Ok Link : <https://openmensa.org/api/v2/canteens?page=2>; rel=\"next\", <https://openmensa.org/api/v2/canteens?page=5>; rel=\"last\" Content-Type : application/json; charset=utf-8 [ { \"id\" : 1 , \"name\" : \"Mensa UniCampus Magdeburg\" , \"city\" : \"Magdeburg\" , \"address\" : \"Pf\u00e4lzer Str. 1, 39106 Magdeburg\" , \"coordinates\" : null }, { \"id\" : 104 , \"name\" : \"Bistro Tasty Studio Babelsberg\" , \"city\" : \"Potsdam\" , \"address\" : \"August-Bebel-Str. 26-53, 14482 Potsdam, Deutschland\" , \"coordinates\" : [ 52.3877669669544 , 13.1209909915924 ] } ]","title":"Response"},{"location":"api/v2/canteens/#get","text":"GET /api/v2/canteens/{id} HTTP / 2.0","title":"Get a canteen"},{"location":"api/v2/canteens/#get-response","text":"GET /api/v2/canteens/1 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"id\" : 1 , \"name\" : \"Mensa UniCampus Magdeburg\" , \"city\" : \"Magdeburg\" , \"address\" : \"Pf\u00e4lzer Str. 1, 39106 Magdeburg\" , \"coordinates\" : [ 52.139618827301895 , 11.647599935531616 ] } id int Unique numerical identifier in the API and database name The canteens name address Human readable real-world locator (vulgo street address ) coordinates Optional list of latitude and longitude in north-eastern direction. Negative values imply southern or western hemisphere. Can be null if no coordinates were given or they are unknown.","title":"Response"},{"location":"api/v2/canteens/days/","text":"Days \u00b6 List days of a canteen \u00b6 GET /api/v2/canteens/{canteen_id}/days HTTP / 2.0 Parameters \u00b6 start YYYY-MM-DD Optional start date for listing available days. Defaults to current day if no nothing is specified. Warning Canteens may not return have data for every day. If there is no data, closing information, or other details for a day, that day will not be listed. Response \u00b6 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 [ { \"date\" : \"2012-10-12\" , \"closed\" : false }, { \"date\" : \"2012-10-15\" , \"closed\" : true } ] Get a day \u00b6 GET /canteens/{canteen_id}/days/{date} HTTP / 2.0 Response \u00b6 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"date\" : \"2012-10-12\" , \"closed\" : false }","title":"Days"},{"location":"api/v2/canteens/days/#days","text":"","title":"Days"},{"location":"api/v2/canteens/days/#list","text":"GET /api/v2/canteens/{canteen_id}/days HTTP / 2.0","title":"List days of a canteen"},{"location":"api/v2/canteens/days/#list-params","text":"start YYYY-MM-DD Optional start date for listing available days. Defaults to current day if no nothing is specified. Warning Canteens may not return have data for every day. If there is no data, closing information, or other details for a day, that day will not be listed.","title":"Parameters"},{"location":"api/v2/canteens/days/#list-response","text":"HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 [ { \"date\" : \"2012-10-12\" , \"closed\" : false }, { \"date\" : \"2012-10-15\" , \"closed\" : true } ]","title":"Response"},{"location":"api/v2/canteens/days/#get","text":"GET /canteens/{canteen_id}/days/{date} HTTP / 2.0","title":"Get a day"},{"location":"api/v2/canteens/days/#get-response","text":"HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"date\" : \"2012-10-12\" , \"closed\" : false }","title":"Response"},{"location":"api/v2/canteens/meals/","text":"Meals \u00b6 List meals for a day \u00b6 GET /canteens/{canteen_id}/days/{date}/meals HTTP / 2.0 Response \u00b6 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 [ { \"id\" : 260 , \"name\" : \"Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat\" , \"notes\" : [ \"ovo-lacto-vegetabil\" , \"mensaVital\" ], \"prices\" : { \"students\" : 2.3 , \"employees\" : 3.65 , \"others\" : 4.6 }, \"category\" : \"Alternativ-Angebot\" }, { \"id\" : 10900 , \"name\" : \"H\u00e4hnchenschnitzel mit Br\u00f6tchen\" , \"notes\" : [ ], \"prices\" : { \"pupils\" : 2.4 , \"others\" : 4.3 }, \"category\" : \"Cafeteria Hei\u00dfe Theke\" } ] Get a meal \u00b6 GET /canteens/{canteen_id}/days/{date}/meals/{id} HTTP / 2.0 Response \u00b6 HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"id\" : 260 , \"name\" : \"Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat\" , \"notes\" : [ \"ovo-lacto-vegetabil\" , \"mensaVital\" ], \"prices\" : { \"students\" : 2.3 , \"employees\" : 3.65 , \"others\" : 4.6 }, \"category\" : \"Alternativ-Angebot\" }","title":"Meals"},{"location":"api/v2/canteens/meals/#meals","text":"","title":"Meals"},{"location":"api/v2/canteens/meals/#list","text":"GET /canteens/{canteen_id}/days/{date}/meals HTTP / 2.0","title":"List meals for a day"},{"location":"api/v2/canteens/meals/#response","text":"HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 [ { \"id\" : 260 , \"name\" : \"Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat\" , \"notes\" : [ \"ovo-lacto-vegetabil\" , \"mensaVital\" ], \"prices\" : { \"students\" : 2.3 , \"employees\" : 3.65 , \"others\" : 4.6 }, \"category\" : \"Alternativ-Angebot\" }, { \"id\" : 10900 , \"name\" : \"H\u00e4hnchenschnitzel mit Br\u00f6tchen\" , \"notes\" : [ ], \"prices\" : { \"pupils\" : 2.4 , \"others\" : 4.3 }, \"category\" : \"Cafeteria Hei\u00dfe Theke\" } ]","title":"Response"},{"location":"api/v2/canteens/meals/#get","text":"GET /canteens/{canteen_id}/days/{date}/meals/{id} HTTP / 2.0","title":"Get a meal"},{"location":"api/v2/canteens/meals/#get-response","text":"HTTP / 2.0 200 Ok Content-Type : application/json; charset=utf-8 { \"id\" : 260 , \"name\" : \"Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat\" , \"notes\" : [ \"ovo-lacto-vegetabil\" , \"mensaVital\" ], \"prices\" : { \"students\" : 2.3 , \"employees\" : 3.65 , \"others\" : 4.6 }, \"category\" : \"Alternativ-Angebot\" }","title":"Response"},{"location":"feed/v1/","text":"Feed v1 (deprecated) \u00b6 Availability \u00b6 As DTD: http://openmensa.org/open-mensa-v1.dtd As XML Schema (preferred): http://openmensa.org/open-mensa-v1.xsd Note: the DTD will be abandoned as of Feed v2 so we advice you to switch to the XML schema as early as possible! Example \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <cafeteria version= \"1.0\" xmlns= \"http://openmensa.org/open-mensa-v1\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v1 http://openmensa.org/open-mensa-v1.xsd\" > <day date= \"2012-05-29\" > <category name= \"Essen 1\" > <meal> <name> R\u00fchrei mit Rahmspinat und Salzkartoffeln </name> <note> ovo-lacto-vegetabil </note> <price> 1.20 </price> </meal> </category> <category name= \"Essen 2\" > <meal> <name> H\u00e4hnchengeschnetzeltes mit exotischen Fr\u00fcchten, dazu Bio-Reis und Mischsalat </name> <note> mit Gefl\u00fcgelfleisch </note> <price> 2.00 </price> </meal> </category> <category name= \"Alternativ-Angebot\" > <meal> <name> Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat </name> <note> ovo-lacto-vegetabil </note> <note> mensaVital </note> <price> 2.50 </price> </meal> </category> <!-- more categories... --> </day> <!-- more days... --> </cafeteria> Validation \u00b6 If you build your feed\u2019s xml carefully (simply copy the first 5 lines from our example, all the XML and schema foo will be done automatically for you), you may upload it to a XML validator that recognizes XML schemas to check for validity. Description \u00b6 This feed format is designed to serve meal data for a single canteen in a single feed. So to serve multiple canteens you need multiple feeds. The cafeteria root element has a version attribute with value 1.0. The meals are grouped by day (having a date attribute as YYYY-MM-DD) and by categories (having a name attribute). We introduced categories to allow meal grouping/classification based on e.g. some product line or desk as most canteens do. Meals \u00b6 All properties associated with a meal are realized as sub-elements as there are: a name (zero or more) notes (zero or more) prices (in \u20ac) The name of a meal, e.g. \u201cRinderhacksteak mit Kartoffeln\u201d. Shouldn\u2019t be more than a couple of words or a sentence in maximum. Additional text may go into several notes: A note often resembles a properties of the associated meal like the ingredients used or some important annotations. One drawback is that you, in case of multiple prices, cannot specify for which group of people a price is valid. That is fixed in v2 .","title":"Feed v1 (deprecated)"},{"location":"feed/v1/#feed-v1-deprecated","text":"","title":"Feed v1 (deprecated)"},{"location":"feed/v1/#availability","text":"As DTD: http://openmensa.org/open-mensa-v1.dtd As XML Schema (preferred): http://openmensa.org/open-mensa-v1.xsd Note: the DTD will be abandoned as of Feed v2 so we advice you to switch to the XML schema as early as possible!","title":"Availability"},{"location":"feed/v1/#example","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <cafeteria version= \"1.0\" xmlns= \"http://openmensa.org/open-mensa-v1\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v1 http://openmensa.org/open-mensa-v1.xsd\" > <day date= \"2012-05-29\" > <category name= \"Essen 1\" > <meal> <name> R\u00fchrei mit Rahmspinat und Salzkartoffeln </name> <note> ovo-lacto-vegetabil </note> <price> 1.20 </price> </meal> </category> <category name= \"Essen 2\" > <meal> <name> H\u00e4hnchengeschnetzeltes mit exotischen Fr\u00fcchten, dazu Bio-Reis und Mischsalat </name> <note> mit Gefl\u00fcgelfleisch </note> <price> 2.00 </price> </meal> </category> <category name= \"Alternativ-Angebot\" > <meal> <name> Gem\u00fcse-Couscouspfanne mit Joghurt-Ingwer-Dip, dazu bunter Blattsalat </name> <note> ovo-lacto-vegetabil </note> <note> mensaVital </note> <price> 2.50 </price> </meal> </category> <!-- more categories... --> </day> <!-- more days... --> </cafeteria>","title":"Example"},{"location":"feed/v1/#validation","text":"If you build your feed\u2019s xml carefully (simply copy the first 5 lines from our example, all the XML and schema foo will be done automatically for you), you may upload it to a XML validator that recognizes XML schemas to check for validity.","title":"Validation"},{"location":"feed/v1/#description","text":"This feed format is designed to serve meal data for a single canteen in a single feed. So to serve multiple canteens you need multiple feeds. The cafeteria root element has a version attribute with value 1.0. The meals are grouped by day (having a date attribute as YYYY-MM-DD) and by categories (having a name attribute). We introduced categories to allow meal grouping/classification based on e.g. some product line or desk as most canteens do.","title":"Description"},{"location":"feed/v1/#meals","text":"All properties associated with a meal are realized as sub-elements as there are: a name (zero or more) notes (zero or more) prices (in \u20ac) The name of a meal, e.g. \u201cRinderhacksteak mit Kartoffeln\u201d. Shouldn\u2019t be more than a couple of words or a sentence in maximum. Additional text may go into several notes: A note often resembles a properties of the associated meal like the ingredients used or some important annotations. One drawback is that you, in case of multiple prices, cannot specify for which group of people a price is valid. That is fixed in v2 .","title":"Meals"},{"location":"feed/v2/","text":"Feed v2 \u00b6 Availability \u00b6 As XML Schema: http://openmensa.org/open-mensa-v2.xsd Changelog \u00b6 Version 2.1 (2015-04-05, beta release) \u00b6 New version tag to specify parser version Meta data attributes like canteen name, address, contact info and information about different feeds for this canteen with its schedule information Warning: The feed 2.1 is currently in implementation. Although we assume the schema remains unchanged, we may change details during the implementation. Version 2.0 (2012-09-02) \u00b6 new openmensa root element name s need to have less than 250 chars rename cafeteria to canteen price role s closing times on day granularity Example \u00b6 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <openmensa version= \"2.1\" xmlns= \"http://openmensa.org/open-mensa-v2\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v2 http://openmensa.org/open-mensa-v2.xsd\" > <version> 5.04-4 </version> <canteen> <day date= \"2012-05-29\" > <category name= \"Hauptgericht\" > <meal> <name> R\u00fchrei mit Rahmspinat und Salzkartoffeln </name> <note> ovo-lacto-vegetabil </note> <price role= \"student\" > 1.20 </price> <price role= \"employee\" > 2.60 </price> <price role= \"other\" > 3.00 </price> </meal> <meal> <name> H\u00e4hnchengeschnetzeltes mit exotischen Fr\u00fcchten, dazu Bio-Reis und Mischsalat </name> <note> mit Gefl\u00fcgelfleisch </note> <price role= \"student\" > 2.00 </price> <price role= \"employee\" > 3.35 </price> <price role= \"other\" > 4.00 </price> </meal> </category> <category name= \"Sonstiges\" > <meal> <name> Spargelcremsuppe </name> <price role= \"other\" > 2.00 </price> </meal> </category> </day> <day date= \"2012-05-28\" > <closed/> </day> </canteen> </openmensa> Validation \u00b6 If you build your feed\u2019s xml carefully (simply copy the first 5 lines from our example, all the XML and schema foo will be done automatically for you), you may upload it to a XML validator (alternative validator ) that recognizes XML schemas to check for validity. If your feed is invalid with respect to our XML schema all contained data will be ignored! So keep your feed valid under all circumstances! Elements \u00b6 <openmensa> \u00b6 The root element is openmensa . It encapsulate all other attributes. This element will be preserved across future feed versions. The version attribute must equal 2.0 or 2.1 . Which version you choose is not technically difference. OpenMensa supports all v2 features independent of the chosen version. We distinguish between the versions to raise errors on to old server schemas and to know which feature set is probably known/implemented. <version> (since version 2.1) \u00b6 The top version tag is optional . It can be inserted to define the version of the parser . It has nothing to do with the canteen or its menu. Alternative the parser version can be return as X-OpenMensa-ParserVersion HTTP-Header. If both are provided, the value from the XML has precedence. The version itself is a normal string that must not exceed 63 characters. OpenMensa does only check whether two versions are the same. There is relation derived from the versions. You are free to choose your matching version format. <canteen> \u00b6 This tag groups all data for one canteen. Currently only one canteen per feed is supported . Your feed must contain exactly one canteen tag. So to serve multiple canteens you need multiple feeds. <day> \u00b6 Main part for the canteen are the day element. They need to have a date attribute formatting the date of this day in the YYYY-MM-DD format. There must only one day element per date. It is not required to provide tags for every day of a range. But be aware that OpenMensa does not process tags with past dates. Closed days \u00b6 It is possible to explicit express that the canteen is (completely) closed on a given day. Add a empty closed tag as child. <category> \u00b6 For each day the meals needs to be grouped by category . Each category tag needs to have a name attribute. The name is (only) displayed to the user and should be descriptive. But the categories only group the individual meals. Again a name can only used once a day, but is is normal to use the same or at least similar category names for each day. Common grouping is based on some product line or desk. A category is only allowed if no closed tag was provided - but then it is required to have at least one category. Each category needs to have at least on meal. <meal> \u00b6 The meal element describes a meal or an individual purchasable entity that is available that the given day. A individual purchasable entry may be a side order. <name> \u00b6 The important and the only required subelement is the name part. It should be a complete description of the meal. The name must not exceed 250 characters.The name of a meal, e.g. \u201cRinderhacksteak mit Kartoffeln\u201d, shouldn\u2019t be more than a couple of words or a sentence in maximum. <notes> \u00b6 Additional text may go into several notes: A note often resembles a properties of the associated meal like the ingredients used or some important annotations. There is (currently) not restrictions on how the notes should look like or what are common notes. If you have a good proposal talk to us. <price> \u00b6 For the meal the price can be expressed via (optional) price elements Because different prices may apply to different groups of people and we want to show, for which group we introduced several roles: pupils students employees (of your organization others (people that do not belong to your organization or to any other group listed here). Please omit price for roles that are not applicable or the some as others. Meta data (since version 2.1) \u00b6 It is possible to provide a special meta data feed. This meta data are used to check whether the canteen meta data are still to-up-date (in case these data can be parsed/automatically received). The meta data are optional, they can be embedded within normal (menu) feeds, but they will be ignored on feed URLs. On the other hand any returned day/menu data for a meta data URL will also skipped. You must ensure that the elements within the canteen are order like: name , address , city , phone , email , location , availability , times , feed , day ! If a meta data URL is provided, it is only required at at least on feed attribute is provided. Example \u00b6 Before any further discussion, this is a (complete) example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <openmensa version= \"2.1\" xmlns= \"http://openmensa.org/open-mensa-v2\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v2 http://openmensa.org/open-mensa-v2.xsd\" > <version> 5.04-4 </version> <canteen> <name> Mensa Griebnitzsee </name> <address> August-Bebel-Str. 89, 14482 Potsdam </address> <city> Potsdam </city> <phone> (0331) 977 3749/3748 </phone> <location latitude= \"52.3935353446923\" longitude= \"13.1278145313263\" /> <availability> public </availability> <times type= \"opening\" > <monday open= \"11:00-14:00\" /> <tuesday open= \"11:00-14:00\" /> <wednesday open= \"11:00-14:00\" /> <thursday open= \"11:00-14:00\" /> <friday open= \"11:00-14:00\" /> <saturday open= \"11:00-13:30\" /> <sunday closed= \"true\" /> </times> <feed name= \"today\" priority= \"0\" > <!-- cron like schedule information --> <schedule dayOfMonth= \"*\" dayOfWeek= \"*\" hour= \"8-14\" retry= \"30 1\" /> <url> http://kaifabian.de/om/potsdam/griebnitzsee.xml?today </url> <source> http://www.studentenwerk-potsdam.de/mensa-griebnitzsee.html </source> </feed> <feed name= \"full\" priority= \"1\" > <schedule dayOfMonth= \"*\" dayOfWeek= \"1\" hour= \"8\" retry= \"60 5 1440\" /> <url> http://kaifabian.de/om/potsdam/griebnitzsee.xml </url> <source> http://www.studentenwerk-potsdam.de/speiseplan/ </source> </feed> </canteen> </openmensa> <feed> \u00b6 A feed is basically only a URL. It is expected that OpenMensa gets a valid feed when requesting this URL. It is possible to define multiple feeds, because there may be menus that change often (e.g. the menu for the current day) and other that not. In additional if it parsing of one aspect fails, the other data should be served normally. It is required that each feed element contains one unique name attribute. This name is only used by OpenMensa to match the given feed to previously saved feed data. But we recommend to choose descriptive names. The optional priority attribute defines override rules between different feeds for a canteen. All feeds have per default the priority 0 . A feed can update/remove a meal if the priority is same or greater than the priority of the feed that created the menu. A example usage: use priority 0 for the full feed, but use 10 for the today feed - today data have priority and can not be overridden by the normal feed. <url> \u00b6 The url element defines which page OpenMensa should request. <schedule> \u00b6 The feed has a schedule element, that specify when this URL should be fetched. The attributes dayOfMonth , dayOfWeek , month , hour and minute describes each a patter for the given unit. The feed is accessed if the current time matches ALL these patterns. It may take some minutes until the feed is fetched depending on the work load. The schedule behaviour and format is equal to crontab . Each pattern may be a comma separated list of individual numbers or ranges like 1,3-5 . Range are inclusive. The special range * means all possible values. A range can be followed by a /<number> to specify to only match the nth value within the range. 0-23/2 matches 0,2,4,6,8,10,12,14,16,18,20,22 . Only the hour attribute is required, dayOfMonth , dayOfWeek and month default to * , minute to 0 . dayOfMonth starts with 1 , dayOfWeek with 0 meaning Sunday ( 1 Monday \u2026). The optional retry attribute defines how to handle errors. Without this attribute OpenMensa does not retry to fetch the feed on errors. The value must be a white-space separated list of positive numbers. The odd positioned one define an interval in minutes , the even positioned the maximal number of retried for this interval. If the last retry limit is omitted, OpenMensa retries until the next regular time. An example: 30 3 means retry maximal 3 time every half hour. 45 5 1440 means repeat first maximal 5 time every 45 minutes, if the feed fails still retry only once a day. If the schedule element is omitted, the feed can only be used for manual fetching. OpenMensa has no implicit scheduling for feeds. <source> \u00b6 You can provide a single URL, from that the data are (mostly) received. So in case of an error or a question, the user can be redirected to this page. Canteen meta data \u00b6 Each canteen attribute that can be edited on OpenMensa can also be provided via the feed. Changes via the feed are NOT used directly, but must be confirmed by one canteen administration. The author is informed about the changes via an email. The supported meta data have each its one tag, the following tags are supported: name : the canteen name address : the (postal) address. We do not require any special format. But the form street nr, zip city is common. If no geo coordinate for the canteen is provided the address is mapped to a point. city : the user relevant city of this canteen. This does not need to be the postal city. The value is e.g. used to search canteens or group them. email / phone : an email address respectively the phone number to contact the canteen. We do not ensure a specific format: the main purpose is that is understandable for humans, but we highly recommend following the E.123 standard. location : the geo coordinates can be passed an latitude and a longitude attribute. Each attribute needs to be a float value. The tag must not contain any content. availability : indicate whether the canteen can be used by everyone ( public ) or not ( restricted ) opening times : see next section Opening times \u00b6 Opening types are defined via a times tag. It must have a type attribute with the value opening . We may later support other time ranges like meal serving times. The times tag should have 7 open child elements (one per week day). If tags are omitted OpenMensa assumes that is was not possible to get a information for this particular day. The elements name are the English weekday name: monday , tuesday , wednesday , thursday , friday , saturday , sunday . You must ensure a correct ordering. Set the closed attribute to true indicate that the canteen has not open at all. Use a open attribute of HH:mm-HH:mm to specify that the canteen has open within the given time interval. Please contact OpenMensa if you need to specify due intervals / express a pause. closed and open attribute must not used both! Remember special closed days can be expressed via the closed tag of days . Support of special opening times is currently not planed. Please contact OpenMensa if you have such a use case.","title":"Feed v2"},{"location":"feed/v2/#feed-v2","text":"","title":"Feed v2"},{"location":"feed/v2/#availability","text":"As XML Schema: http://openmensa.org/open-mensa-v2.xsd","title":"Availability"},{"location":"feed/v2/#changelog","text":"","title":"Changelog"},{"location":"feed/v2/#version-21-2015-04-05-beta-release","text":"New version tag to specify parser version Meta data attributes like canteen name, address, contact info and information about different feeds for this canteen with its schedule information Warning: The feed 2.1 is currently in implementation. Although we assume the schema remains unchanged, we may change details during the implementation.","title":"Version 2.1 (2015-04-05, beta release)"},{"location":"feed/v2/#version-20-2012-09-02","text":"new openmensa root element name s need to have less than 250 chars rename cafeteria to canteen price role s closing times on day granularity","title":"Version 2.0 (2012-09-02)"},{"location":"feed/v2/#feed-example","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <openmensa version= \"2.1\" xmlns= \"http://openmensa.org/open-mensa-v2\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v2 http://openmensa.org/open-mensa-v2.xsd\" > <version> 5.04-4 </version> <canteen> <day date= \"2012-05-29\" > <category name= \"Hauptgericht\" > <meal> <name> R\u00fchrei mit Rahmspinat und Salzkartoffeln </name> <note> ovo-lacto-vegetabil </note> <price role= \"student\" > 1.20 </price> <price role= \"employee\" > 2.60 </price> <price role= \"other\" > 3.00 </price> </meal> <meal> <name> H\u00e4hnchengeschnetzeltes mit exotischen Fr\u00fcchten, dazu Bio-Reis und Mischsalat </name> <note> mit Gefl\u00fcgelfleisch </note> <price role= \"student\" > 2.00 </price> <price role= \"employee\" > 3.35 </price> <price role= \"other\" > 4.00 </price> </meal> </category> <category name= \"Sonstiges\" > <meal> <name> Spargelcremsuppe </name> <price role= \"other\" > 2.00 </price> </meal> </category> </day> <day date= \"2012-05-28\" > <closed/> </day> </canteen> </openmensa>","title":"Example"},{"location":"feed/v2/#validation","text":"If you build your feed\u2019s xml carefully (simply copy the first 5 lines from our example, all the XML and schema foo will be done automatically for you), you may upload it to a XML validator (alternative validator ) that recognizes XML schemas to check for validity. If your feed is invalid with respect to our XML schema all contained data will be ignored! So keep your feed valid under all circumstances!","title":"Validation"},{"location":"feed/v2/#elements","text":"","title":"Elements"},{"location":"feed/v2/#el-openmensa","text":"The root element is openmensa . It encapsulate all other attributes. This element will be preserved across future feed versions. The version attribute must equal 2.0 or 2.1 . Which version you choose is not technically difference. OpenMensa supports all v2 features independent of the chosen version. We distinguish between the versions to raise errors on to old server schemas and to know which feature set is probably known/implemented.","title":"&lt;openmensa&gt;"},{"location":"feed/v2/#el-version","text":"The top version tag is optional . It can be inserted to define the version of the parser . It has nothing to do with the canteen or its menu. Alternative the parser version can be return as X-OpenMensa-ParserVersion HTTP-Header. If both are provided, the value from the XML has precedence. The version itself is a normal string that must not exceed 63 characters. OpenMensa does only check whether two versions are the same. There is relation derived from the versions. You are free to choose your matching version format.","title":"&lt;version&gt; (since version 2.1)"},{"location":"feed/v2/#el-canteen","text":"This tag groups all data for one canteen. Currently only one canteen per feed is supported . Your feed must contain exactly one canteen tag. So to serve multiple canteens you need multiple feeds.","title":"&lt;canteen&gt;"},{"location":"feed/v2/#el-day","text":"Main part for the canteen are the day element. They need to have a date attribute formatting the date of this day in the YYYY-MM-DD format. There must only one day element per date. It is not required to provide tags for every day of a range. But be aware that OpenMensa does not process tags with past dates.","title":"&lt;day&gt;"},{"location":"feed/v2/#closed-days","text":"It is possible to explicit express that the canteen is (completely) closed on a given day. Add a empty closed tag as child.","title":"Closed days"},{"location":"feed/v2/#el-category","text":"For each day the meals needs to be grouped by category . Each category tag needs to have a name attribute. The name is (only) displayed to the user and should be descriptive. But the categories only group the individual meals. Again a name can only used once a day, but is is normal to use the same or at least similar category names for each day. Common grouping is based on some product line or desk. A category is only allowed if no closed tag was provided - but then it is required to have at least one category. Each category needs to have at least on meal.","title":"&lt;category&gt;"},{"location":"feed/v2/#el-meal","text":"The meal element describes a meal or an individual purchasable entity that is available that the given day. A individual purchasable entry may be a side order.","title":"&lt;meal&gt;"},{"location":"feed/v2/#el-meal-name","text":"The important and the only required subelement is the name part. It should be a complete description of the meal. The name must not exceed 250 characters.The name of a meal, e.g. \u201cRinderhacksteak mit Kartoffeln\u201d, shouldn\u2019t be more than a couple of words or a sentence in maximum.","title":"&lt;name&gt;"},{"location":"feed/v2/#el-meal-notes","text":"Additional text may go into several notes: A note often resembles a properties of the associated meal like the ingredients used or some important annotations. There is (currently) not restrictions on how the notes should look like or what are common notes. If you have a good proposal talk to us.","title":"&lt;notes&gt;"},{"location":"feed/v2/#el-meal-price","text":"For the meal the price can be expressed via (optional) price elements Because different prices may apply to different groups of people and we want to show, for which group we introduced several roles: pupils students employees (of your organization others (people that do not belong to your organization or to any other group listed here). Please omit price for roles that are not applicable or the some as others.","title":"&lt;price&gt;"},{"location":"feed/v2/#meta-data-since-version-21","text":"It is possible to provide a special meta data feed. This meta data are used to check whether the canteen meta data are still to-up-date (in case these data can be parsed/automatically received). The meta data are optional, they can be embedded within normal (menu) feeds, but they will be ignored on feed URLs. On the other hand any returned day/menu data for a meta data URL will also skipped. You must ensure that the elements within the canteen are order like: name , address , city , phone , email , location , availability , times , feed , day ! If a meta data URL is provided, it is only required at at least on feed attribute is provided.","title":"Meta data (since version 2.1)"},{"location":"feed/v2/#metadata-example","text":"Before any further discussion, this is a (complete) example: <?xml version=\"1.0\" encoding=\"UTF-8\"?> <openmensa version= \"2.1\" xmlns= \"http://openmensa.org/open-mensa-v2\" xmlns:xsi= \"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation= \"http://openmensa.org/open-mensa-v2 http://openmensa.org/open-mensa-v2.xsd\" > <version> 5.04-4 </version> <canteen> <name> Mensa Griebnitzsee </name> <address> August-Bebel-Str. 89, 14482 Potsdam </address> <city> Potsdam </city> <phone> (0331) 977 3749/3748 </phone> <location latitude= \"52.3935353446923\" longitude= \"13.1278145313263\" /> <availability> public </availability> <times type= \"opening\" > <monday open= \"11:00-14:00\" /> <tuesday open= \"11:00-14:00\" /> <wednesday open= \"11:00-14:00\" /> <thursday open= \"11:00-14:00\" /> <friday open= \"11:00-14:00\" /> <saturday open= \"11:00-13:30\" /> <sunday closed= \"true\" /> </times> <feed name= \"today\" priority= \"0\" > <!-- cron like schedule information --> <schedule dayOfMonth= \"*\" dayOfWeek= \"*\" hour= \"8-14\" retry= \"30 1\" /> <url> http://kaifabian.de/om/potsdam/griebnitzsee.xml?today </url> <source> http://www.studentenwerk-potsdam.de/mensa-griebnitzsee.html </source> </feed> <feed name= \"full\" priority= \"1\" > <schedule dayOfMonth= \"*\" dayOfWeek= \"1\" hour= \"8\" retry= \"60 5 1440\" /> <url> http://kaifabian.de/om/potsdam/griebnitzsee.xml </url> <source> http://www.studentenwerk-potsdam.de/speiseplan/ </source> </feed> </canteen> </openmensa>","title":"Example"},{"location":"feed/v2/#el-feed","text":"A feed is basically only a URL. It is expected that OpenMensa gets a valid feed when requesting this URL. It is possible to define multiple feeds, because there may be menus that change often (e.g. the menu for the current day) and other that not. In additional if it parsing of one aspect fails, the other data should be served normally. It is required that each feed element contains one unique name attribute. This name is only used by OpenMensa to match the given feed to previously saved feed data. But we recommend to choose descriptive names. The optional priority attribute defines override rules between different feeds for a canteen. All feeds have per default the priority 0 . A feed can update/remove a meal if the priority is same or greater than the priority of the feed that created the menu. A example usage: use priority 0 for the full feed, but use 10 for the today feed - today data have priority and can not be overridden by the normal feed.","title":"&lt;feed&gt;"},{"location":"feed/v2/#el-feed-url","text":"The url element defines which page OpenMensa should request.","title":"&lt;url&gt;"},{"location":"feed/v2/#el-feed-schedule","text":"The feed has a schedule element, that specify when this URL should be fetched. The attributes dayOfMonth , dayOfWeek , month , hour and minute describes each a patter for the given unit. The feed is accessed if the current time matches ALL these patterns. It may take some minutes until the feed is fetched depending on the work load. The schedule behaviour and format is equal to crontab . Each pattern may be a comma separated list of individual numbers or ranges like 1,3-5 . Range are inclusive. The special range * means all possible values. A range can be followed by a /<number> to specify to only match the nth value within the range. 0-23/2 matches 0,2,4,6,8,10,12,14,16,18,20,22 . Only the hour attribute is required, dayOfMonth , dayOfWeek and month default to * , minute to 0 . dayOfMonth starts with 1 , dayOfWeek with 0 meaning Sunday ( 1 Monday \u2026). The optional retry attribute defines how to handle errors. Without this attribute OpenMensa does not retry to fetch the feed on errors. The value must be a white-space separated list of positive numbers. The odd positioned one define an interval in minutes , the even positioned the maximal number of retried for this interval. If the last retry limit is omitted, OpenMensa retries until the next regular time. An example: 30 3 means retry maximal 3 time every half hour. 45 5 1440 means repeat first maximal 5 time every 45 minutes, if the feed fails still retry only once a day. If the schedule element is omitted, the feed can only be used for manual fetching. OpenMensa has no implicit scheduling for feeds.","title":"&lt;schedule&gt;"},{"location":"feed/v2/#el-feed-source","text":"You can provide a single URL, from that the data are (mostly) received. So in case of an error or a question, the user can be redirected to this page.","title":"&lt;source&gt;"},{"location":"feed/v2/#canteen-meta-data","text":"Each canteen attribute that can be edited on OpenMensa can also be provided via the feed. Changes via the feed are NOT used directly, but must be confirmed by one canteen administration. The author is informed about the changes via an email. The supported meta data have each its one tag, the following tags are supported: name : the canteen name address : the (postal) address. We do not require any special format. But the form street nr, zip city is common. If no geo coordinate for the canteen is provided the address is mapped to a point. city : the user relevant city of this canteen. This does not need to be the postal city. The value is e.g. used to search canteens or group them. email / phone : an email address respectively the phone number to contact the canteen. We do not ensure a specific format: the main purpose is that is understandable for humans, but we highly recommend following the E.123 standard. location : the geo coordinates can be passed an latitude and a longitude attribute. Each attribute needs to be a float value. The tag must not contain any content. availability : indicate whether the canteen can be used by everyone ( public ) or not ( restricted ) opening times : see next section","title":"Canteen meta data"},{"location":"feed/v2/#opening-times","text":"Opening types are defined via a times tag. It must have a type attribute with the value opening . We may later support other time ranges like meal serving times. The times tag should have 7 open child elements (one per week day). If tags are omitted OpenMensa assumes that is was not possible to get a information for this particular day. The elements name are the English weekday name: monday , tuesday , wednesday , thursday , friday , saturday , sunday . You must ensure a correct ordering. Set the closed attribute to true indicate that the canteen has not open at all. Use a open attribute of HH:mm-HH:mm to specify that the canteen has open within the given time interval. Please contact OpenMensa if you need to specify due intervals / express a pause. closed and open attribute must not used both! Remember special closed days can be expressed via the closed tag of days . Support of special opening times is currently not planed. Please contact OpenMensa if you have such a use case.","title":"Opening times"},{"location":"parsers/","text":"The Knowledge About OpenMensa Parser \u00b6 Understand OpenMensa\u2019s parsers concept How to create a new OpenMensa parser","title":"The Knowledge About OpenMensa Parser"},{"location":"parsers/#the-knowledge-about-openmensa-parser","text":"Understand OpenMensa\u2019s parsers concept How to create a new OpenMensa parser","title":"The Knowledge About OpenMensa Parser"},{"location":"parsers/tutorial/","text":"Creating a parser \u00b6 This document describes briefly the important steps for creating a new OpenMensa parser and adding the represented new canteen with its menu to OpenMensa. Afterwards these new data can be accessed in all OpenMensa tools (Website, iOS-App, Android-App, \u2026). You should have read Understand the OpenMensa Parser concept . It is recommended to first read to whole document to know the process itself with all its requirements. Afterwards you can do it step by step. Find The Data \u00b6 Parsers do not create the canteen data. They receive the data from original sources. Most Studentenwerk provide meal information on there website or via a newsletter. For some canteens there are existing apps. They need an API or something like that to receive the displayed information. Maybe this can be accessed/parsed also by the OpenMensa parser. For now I assume that a website should be used as data source. It is the common case. Decide How To Parse The Data \u00b6 We need to transfer the meal information into the standardized OpenMensa feed format . To be able to do that we need to parse the original ones. This depends on the kind of data source you have. It is every easy for an existing API (JSON parser or something) and difficult for PDF documents. Depending on your data you should look for libraries that support the parsing and choose your programming language afterwards. For websites I recommend a tool for error tolerant HTML parsing, like BeautifulSoup . There is no general way to create a parser for a specific website. It depends very on your input data. Take a look at a collection of parsers for inspiration. But some general tips: Try to make as few assumptions about the input data as possible - e.g. try to find the canteen data by HTML id or CSS class and not by walking thought the DOM tree. If you need to make assumptions, write your parser in such a way, that you get exceptions when these assumptions are wrong. So you get a notice when you have to update your parser. Write And Test Your Parser \u00b6 Now you should be able to create your parser. If you use Python as programming language, you can use the pyopenmensa library to create the OpenMensa feed. It implements also some common parsing tasks (like dates or meal notes) Afterwards test that the created XML is a valid OpenMensa feed (XML validation, e.g. using Validome ) and check that the meal information are the correct ones. Deploy Your Parser \u00b6 OpenMensa accesses the registered feeds via HTTP. Therefore the created parser needs to be deployed somewhere and be accessible from the internet. If you can not host the parser yourself, you can look for free hosting services (like Google\u2019s app engine) or ask in the OpenMensa community for help. If the parser is deployed, you should be able to validate the generated XML feeds via URL. Register The New Canteens \u00b6 At first you have to become an OpenMensa developer. Therefore log in OpenMensa. And provide an email address in your profile page. Afterwards you have additional links in your profile, like \u201cMeine Mensen\u201d. On the \u201cMeine Mensen\u201d page you can register new canteens. You have to provide some meta information about the canteen like name, position and the URL to your parser. Monitor Your Work \u00b6 Because the data sources changes from time to time, you should have an eye on your parser. OpenMensa informs you via email about every fetch errors for you parser. You should also check that the feed data matches the original data - especially in the first days.","title":"Creating a parser"},{"location":"parsers/tutorial/#creating-a-parser","text":"This document describes briefly the important steps for creating a new OpenMensa parser and adding the represented new canteen with its menu to OpenMensa. Afterwards these new data can be accessed in all OpenMensa tools (Website, iOS-App, Android-App, \u2026). You should have read Understand the OpenMensa Parser concept . It is recommended to first read to whole document to know the process itself with all its requirements. Afterwards you can do it step by step.","title":"Creating a parser"},{"location":"parsers/tutorial/#find-the-data","text":"Parsers do not create the canteen data. They receive the data from original sources. Most Studentenwerk provide meal information on there website or via a newsletter. For some canteens there are existing apps. They need an API or something like that to receive the displayed information. Maybe this can be accessed/parsed also by the OpenMensa parser. For now I assume that a website should be used as data source. It is the common case.","title":"Find The Data"},{"location":"parsers/tutorial/#decide-how-to-parse-the-data","text":"We need to transfer the meal information into the standardized OpenMensa feed format . To be able to do that we need to parse the original ones. This depends on the kind of data source you have. It is every easy for an existing API (JSON parser or something) and difficult for PDF documents. Depending on your data you should look for libraries that support the parsing and choose your programming language afterwards. For websites I recommend a tool for error tolerant HTML parsing, like BeautifulSoup . There is no general way to create a parser for a specific website. It depends very on your input data. Take a look at a collection of parsers for inspiration. But some general tips: Try to make as few assumptions about the input data as possible - e.g. try to find the canteen data by HTML id or CSS class and not by walking thought the DOM tree. If you need to make assumptions, write your parser in such a way, that you get exceptions when these assumptions are wrong. So you get a notice when you have to update your parser.","title":"Decide How To Parse The Data"},{"location":"parsers/tutorial/#write-and-test-your-parser","text":"Now you should be able to create your parser. If you use Python as programming language, you can use the pyopenmensa library to create the OpenMensa feed. It implements also some common parsing tasks (like dates or meal notes) Afterwards test that the created XML is a valid OpenMensa feed (XML validation, e.g. using Validome ) and check that the meal information are the correct ones.","title":"Write And Test Your Parser"},{"location":"parsers/tutorial/#deploy-your-parser","text":"OpenMensa accesses the registered feeds via HTTP. Therefore the created parser needs to be deployed somewhere and be accessible from the internet. If you can not host the parser yourself, you can look for free hosting services (like Google\u2019s app engine) or ask in the OpenMensa community for help. If the parser is deployed, you should be able to validate the generated XML feeds via URL.","title":"Deploy Your Parser"},{"location":"parsers/tutorial/#register-the-new-canteens","text":"At first you have to become an OpenMensa developer. Therefore log in OpenMensa. And provide an email address in your profile page. Afterwards you have additional links in your profile, like \u201cMeine Mensen\u201d. On the \u201cMeine Mensen\u201d page you can register new canteens. You have to provide some meta information about the canteen like name, position and the URL to your parser.","title":"Register The New Canteens"},{"location":"parsers/tutorial/#monitor-your-work","text":"Because the data sources changes from time to time, you should have an eye on your parser. OpenMensa informs you via email about every fetch errors for you parser. You should also check that the feed data matches the original data - especially in the first days.","title":"Monitor Your Work"},{"location":"parsers/understand/","text":"Concept \u00b6 This document describes what you should know about task, terminology and usage of OpenMensa\u2019s parsers. Motivation \u00b6 As described on the OpenMensa website OpenMensa is designed as information hub for canteen and its meal menus. The data parsers (canteen + menu) and the front ends (apps and other services) are community driven. OpenMensa expects the menus to be provided as an OpenMensa Feed. Although the organization of canteens could provide this feed directly the most will not. So parsers are used to translate the data to the expected feed format. Normally a organization runs multiple canteens at once (e.g. in the same city). So a parser can be used for multiple canteens. How OpenMensa Retrieves Canteen Menus (fetch) \u00b6 For OpenMensa is a parser only an URL for a canteen. To update the canteen menus, OpenMensa performs a HTTP GET request to the given URL. The returned data must be an XML document that is valid against the Feed v1 or Feed v2 . If OpenMensa receives a HTTP error or an invalid document, OpenMensa stops and the fetch is failed. The provided parser URL should return all menu information available. Because this can be very costly, OpenMensa fetches this feed only once a day. To be able to get menu updates faster, OpenMensa supports so called today URLs. If provided, OpenMensa fetches this URL hourly from 8:00 to 15:00. OpenMensa assumes that this feed includes at least the menu for today (that\u2019s why it\u2019s named \u201ctoday URL\u201d) but it can be more. Normal and today URL can be the same. The following algorithm illustrates the OpenMensa behavior: def fetch_single_canteen ( canteen ): # called for every canteen at midnight sleep ( 8 * 3600 ); # start at 8 am to fetch # on every day start with main fetch, retry hourly on errors: successfully_fetch = False while not successfully_fetch : successfully_fetch = fetch_feed ( canteen . main_url ) sleep ( 3600 ) # if today URL provides, look hourly for updates: while canteen . today_url and now () . hour < 15 : fetch_feed ( canteen . today_url )() sleep ( 3600 ) The Canteen Owner \u00b6 All canteen data is community provided. Every canteen feed has an owner. This is the user who wrote the parser for this canteen, provided the canteen meta data and added it to OpenMensa. He can update all this data (canteen meta data, parser URL), and has also the possibility to instruct OpenMensa to do an extra fetch. Additional the owner will be informed about all occurred fetch errors.","title":"Concept"},{"location":"parsers/understand/#concept","text":"This document describes what you should know about task, terminology and usage of OpenMensa\u2019s parsers.","title":"Concept"},{"location":"parsers/understand/#motivation","text":"As described on the OpenMensa website OpenMensa is designed as information hub for canteen and its meal menus. The data parsers (canteen + menu) and the front ends (apps and other services) are community driven. OpenMensa expects the menus to be provided as an OpenMensa Feed. Although the organization of canteens could provide this feed directly the most will not. So parsers are used to translate the data to the expected feed format. Normally a organization runs multiple canteens at once (e.g. in the same city). So a parser can be used for multiple canteens.","title":"Motivation"},{"location":"parsers/understand/#how-openmensa-retrieves-canteen-menus-fetch","text":"For OpenMensa is a parser only an URL for a canteen. To update the canteen menus, OpenMensa performs a HTTP GET request to the given URL. The returned data must be an XML document that is valid against the Feed v1 or Feed v2 . If OpenMensa receives a HTTP error or an invalid document, OpenMensa stops and the fetch is failed. The provided parser URL should return all menu information available. Because this can be very costly, OpenMensa fetches this feed only once a day. To be able to get menu updates faster, OpenMensa supports so called today URLs. If provided, OpenMensa fetches this URL hourly from 8:00 to 15:00. OpenMensa assumes that this feed includes at least the menu for today (that\u2019s why it\u2019s named \u201ctoday URL\u201d) but it can be more. Normal and today URL can be the same. The following algorithm illustrates the OpenMensa behavior: def fetch_single_canteen ( canteen ): # called for every canteen at midnight sleep ( 8 * 3600 ); # start at 8 am to fetch # on every day start with main fetch, retry hourly on errors: successfully_fetch = False while not successfully_fetch : successfully_fetch = fetch_feed ( canteen . main_url ) sleep ( 3600 ) # if today URL provides, look hourly for updates: while canteen . today_url and now () . hour < 15 : fetch_feed ( canteen . today_url )() sleep ( 3600 )","title":"How OpenMensa Retrieves Canteen Menus (fetch)"},{"location":"parsers/understand/#the-canteen-owner","text":"All canteen data is community provided. Every canteen feed has an owner. This is the user who wrote the parser for this canteen, provided the canteen meta data and added it to OpenMensa. He can update all this data (canteen meta data, parser URL), and has also the possibility to instruct OpenMensa to do an extra fetch. Additional the owner will be informed about all occurred fetch errors.","title":"The Canteen Owner"}]}